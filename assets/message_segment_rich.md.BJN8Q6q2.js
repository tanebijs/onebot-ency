import{_ as e,c as a,o as r,ae as d}from"./chunks/framework.CgMrDesg.js";const p=JSON.parse('{"title":"富文本消息段","description":"","frontmatter":{},"headers":[],"relativePath":"message/segment/rich.md","filePath":"message/segment/rich.md"}'),o={name:"message/segment/rich.md"};function h(l,t,i,c,n,s){return r(),a("div",null,t[0]||(t[0]=[d('<h1 id="富文本消息段" tabindex="-1">富文本消息段 <a class="header-anchor" href="#富文本消息段" aria-label="Permalink to &quot;富文本消息段&quot;">​</a></h1><p>富文本消息段指出现在 QQ 的聊天气泡内，可以混合发送的消息段。</p><h2 id="text" tabindex="-1"><code>text</code> <a class="header-anchor" href="#text" aria-label="Permalink to &quot;`text`&quot;">​</a></h2><p>表示一段纯文本。</p><h3 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h3><table tabindex="0"><thead><tr><th>参数名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>text</td><td>string</td><td>文本内容</td></tr></tbody></table><h3 id="说明" tabindex="-1">说明 <a class="header-anchor" href="#说明" aria-label="Permalink to &quot;说明&quot;">​</a></h3><p><code>text</code> 消息段不需要用 CQ 码格式（<code>[CQ:text,text=内容]</code>）表示，直接用字符串表示即可。</p><h2 id="face" tabindex="-1"><code>face</code> <a class="header-anchor" href="#face" aria-label="Permalink to &quot;`face`&quot;">​</a></h2><p>表示一个 QQ 表情或 QQ 支持的 Emoji 表情。</p><h3 id="参数-1" tabindex="-1">参数 <a class="header-anchor" href="#参数-1" aria-label="Permalink to &quot;参数&quot;">​</a></h3><table tabindex="0"><thead><tr><th>参数名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>string</td><td>表情 ID</td></tr></tbody></table><h3 id="说明-1" tabindex="-1">说明 <a class="header-anchor" href="#说明-1" aria-label="Permalink to &quot;说明&quot;">​</a></h3><p>表情 ID 有以下几个参考页面：</p><ul><li><a href="https://bot.q.qq.com/wiki/develop/api-v2/openapi/emoji/model.html" target="_blank" rel="noreferrer">QQ 机器人文档的表情对象</a></li><li><a href="https://github.com/kyubotics/coolq-http-api/wiki/%E8%A1%A8%E6%83%85-CQ-%E7%A0%81-ID-%E8%A1%A8" target="_blank" rel="noreferrer">表情 CQ 码 ID 表</a></li><li><a href="https://koishi.js.org/QFace/#/qqnt" target="_blank" rel="noreferrer">Koishi QFace</a></li></ul><p>以下是一些协议端实现的细节：</p><ul><li><a href="https://github.com/LagrangeDev/Lagrange.Core/blob/946f845f1fe394fbe38c2db70d3b20304142501e/Lagrange.OneBot/Message/Entity/FaceSegment.cs#L14" target="_blank" rel="noreferrer">Lagrange.OneBot</a> 的实现中包含扩展字段 <code>large</code> (boolean)，表示是否为“大表情”。这一字段适用于 QQ 的“超级表情”分类，当这一字段为 <code>true</code> 时，这一表情作为大表情发送；当这一字段为 <code>false</code> 时，这一表情作为小表情发送，会出现在文本框中。</li><li><a href="https://github.com/NapNeko/NapCatQQ/blob/c509a01d7d5fbbf3c20bac2f7d59a2637902320f/src/onebot/types/message.ts#L164" target="_blank" rel="noreferrer">NapCatQQ</a> 的实现中包含扩展字段 <code>resultId</code> (string) 和 <code>chainCount</code> (number)，这两个字段用于“接龙表情”，这是 2024 年年初 QQ 新增的功能。<code>resultId</code> 表示接龙表情的不同变种，<code>chainCount</code> 表示接龙表情到这条消息为止的接龙数量。</li></ul><h2 id="at" tabindex="-1"><code>at</code> <a class="header-anchor" href="#at" aria-label="Permalink to &quot;`at`&quot;">​</a></h2><p>表示一条消息中提及某人（会通知被提及的人），<strong>只能在群聊中使用</strong>。</p><details class="details custom-block"><summary>一点碎碎念</summary><p>你猜我为什么要加最后半句呢，就是因为有小天才在私聊中使用了这个功能，而当时的 NapCatQQ 也没有做限制，于是——Boom！</p></details><h3 id="参数-2" tabindex="-1">参数 <a class="header-anchor" href="#参数-2" aria-label="Permalink to &quot;参数&quot;">​</a></h3><table tabindex="0"><thead><tr><th>参数名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>qq</td><td>number 或 <code>all</code></td><td>被 at 的 QQ 号；<code>all</code> 表示 at 全体成员</td></tr></tbody></table><h3 id="说明-2" tabindex="-1">说明 <a class="header-anchor" href="#说明-2" aria-label="Permalink to &quot;说明&quot;">​</a></h3><ul><li><a href="https://docs.go-cqhttp.org/cqcode/#%E6%9F%90%E4%BA%BA" target="_blank" rel="noreferrer">go-cqhttp</a> 的实现中包含扩展字段 <code>name</code> (string)，仅在发送时使用，表示如果找不到 <code>qq</code> 对应的 QQ 号，则使用这个字段作为 at 的名称。</li><li>Lagrange.OneBot、NapCatQQ、LLOneBot 不约而同地支持了这个字段。</li></ul><h2 id="reply" tabindex="-1"><code>reply</code> <a class="header-anchor" href="#reply" aria-label="Permalink to &quot;`reply`&quot;">​</a></h2><p>表示引用某条消息。</p><h3 id="参数-3" tabindex="-1">参数 <a class="header-anchor" href="#参数-3" aria-label="Permalink to &quot;参数&quot;">​</a></h3><table tabindex="0"><thead><tr><th>参数名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>number</td><td>被引用消息的 ID</td></tr></tbody></table><h3 id="说明-3" tabindex="-1">说明 <a class="header-anchor" href="#说明-3" aria-label="Permalink to &quot;说明&quot;">​</a></h3><p><a href="https://docs.go-cqhttp.org/cqcode/#%E5%9B%9E%E5%A4%8D" target="_blank" rel="noreferrer">go-cqhttp</a> 的实现增加了如下字段，以提高回复的可自定义性：</p><table tabindex="0"><thead><tr><th>参数名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>text</td><td>string</td><td>回复的文本内容</td></tr><tr><td>qq</td><td>number</td><td>被回复消息的发送者 QQ 号</td></tr><tr><td>time</td><td>number</td><td>被回复消息的发送时间</td></tr><tr><td>seq</td><td>number</td><td>被回复消息的序列号</td></tr></tbody></table><p>当 <code>id</code> 和以上字段都存在时，会优先使用 <code>id</code> 字段；当无法找到 <code>id</code> 对应的消息时，则会使用扩展字段。</p><h2 id="image" tabindex="-1"><code>image</code> <a class="header-anchor" href="#image" aria-label="Permalink to &quot;`image`&quot;">​</a></h2><p>这一消息段比较特殊，它既可以作为富文本消息段，也可以作为媒体消息段，具体定义见媒体消息段。</p>',34)]))}const m=e(o,[["render",h]]);export{p as __pageData,m as default};
