import{_ as t,c as a,o,ae as r}from"./chunks/framework.CnuuZLM2.js";const d=JSON.parse('{"title":"总序","description":"","frontmatter":{},"headers":[],"relativePath":"general/index.md","filePath":"general/index.md"}'),n={name:"general/index.md"};function p(s,e,l,i,h,c){return o(),a("div",null,e[0]||(e[0]=[r('<h1 id="总序" tabindex="-1">总序 <a class="header-anchor" href="#总序" aria-label="Permalink to &quot;总序&quot;">​</a></h1><h2 id="你是谁-凭什么由你来定义-onebot" tabindex="-1">你是谁？凭什么由你来定义 OneBot？ <a class="header-anchor" href="#你是谁-凭什么由你来定义-onebot" aria-label="Permalink to &quot;你是谁？凭什么由你来定义 OneBot？&quot;">​</a></h2><p>我是尚未完善的一个协议端——<a href="https://github.com/tanebijs/tanebi" target="_blank" rel="noreferrer">tanebi</a> 的开发者，同时也或多或少参与过 <a href="https://github.com/LagrangeDev/Lagrange.Core" target="_blank" rel="noreferrer">Lagrange.Core</a> 和 <a href="https://github.com/NapNeko/NapCatQQ" target="_blank" rel="noreferrer">NapCatQQ</a> 的开发。为了编写 tanebi 的 <a href="https://github.com/tanebijs/tanebi/tree/main/packages/app" target="_blank" rel="noreferrer">OneBot 11 实现部分</a>，我参考了<a href="https://11.onebot.dev/" target="_blank" rel="noreferrer">OneBot 11 的官方文档</a>、<a href="https://docs.go-cqhttp.org/" target="_blank" rel="noreferrer">go-cqhttp 帮助中心</a>，以及 <a href="https://lagrange-onebot.apifox.cn/" target="_blank" rel="noreferrer">Lagrange.OneBot</a> 和 <a href="https://napcat.apifox.cn/" target="_blank" rel="noreferrer">NapCatQQ</a> 在 Apifox 发布的文档。</p><p>没有人能真正定义 OneBot，包括我自己，抑或是每个人都是 OneBot 的定义者。OneBot 是一个开放的协议，任何人都可以实现它。我们能做的，也只是将已有的实现进行整理和剖析。</p><h2 id="都有那么多文档了-那做这个的意义何在" tabindex="-1">都有那么多文档了，那做这个的意义何在？ <a class="header-anchor" href="#都有那么多文档了-那做这个的意义何在" aria-label="Permalink to &quot;都有那么多文档了，那做这个的意义何在？&quot;">​</a></h2><p>以下是 OneBot 11 官方对 OneBot 11 的介绍，成文于 2020 年，供参考：</p><details class="details custom-block"><summary>OneBot 11 官方文档的介绍</summary><p>OneBot 标准是从原 CKYU 平台的 CQHTTP 插件接口修改而来的通用聊天机器人应用接口标准。</p><p><strong>背景</strong></p><p>CQHTTP 插件是 2017 年初出现的基于 CKYU 机器人平台的一款开源免费插件，它使用户能够通过 HTTP 或 WebSocket 对 CKYU 的事件进行上报以及接收请求来调用 CKYU 的 DLL 接口，从而可以使用其它语言（不方便编译到原生二进制的语言）编写 CKYU 插件。</p><p>有非常多的开发者使用 Python、Java、Node.js 等 web 开发常用语言基于 CQHTTP 插件编写各式各样的聊天机器人。</p><p>在新的机器人平台 Mirai 开始发展之后，以及 CKYU 决定停运之后，为了让原来基于 CQHTTP 插件编写的机器人能够继续运行，一些开发者在其它机器人平台上编写了兼容 CQHTTP 接口的插件/模块。</p><p><strong>动机</strong></p><p>基于 CQHTTP 插件编写的机器人项目有很多，CKYU 停运后，如果不能平滑迁移到其它平台，这些项目的很多代码都需要重写，甚至有很多项目可能被迫放弃维护，这对机器人开发社区来说是一种损失和浪费。</p><p>目前各 CQHTTP 兼容项目通常是实现了部分原 CQHTTP 插件的接口，并利用新平台的特性，新增了一些拓展接口。长远来看，这可能导致不同兼容项目最终形成了各自的「CQHTTP 接口变种」，当用户深度接入其中一个兼容项目后，可能又会出现与其它变种不兼容的情况，最终仍然存在潜在的迁移困难。</p><p>本项目希望通过改写原 CQHTTP 插件文档 + 引入 CQHTTP 兼容项目的新特性的方式，维护一个统一的、不断发展的接口标准（即 OneBot 标准），推动各 CQHTTP 兼容项目实现长远的兼容，为用户带来便利。</p><p><strong>预期</strong></p><p>开发者可以在各类机器人平台实现 OneBot 标准，从而使用户可以将基于 OneBot 标准的机器人项目无缝迁移到这些平台。</p><p>当需要添加新的功能（例如新的事件、API、消息段类型等）时，可以通过 pull request 扩充本标准，此后其它 OneBot 实现在添加同一功能时应参考扩充后的标准。</p></details><p>OneBot 11 标准拟定距今已有五年之久，同样产生了大量 OneBot 11 实现。遗憾的是，OneBot 11 并没有实现其“一统天下协议”的愿望，在不同 OneBot 11 实现之间迁移更是困难重重。上文所说的情况，把词换一换就可以用在 OneBot 11 上了：</p><blockquote><p>目前各 OneBot 11 兼容项目通常是实现了部分原 OneBot 11 插件的接口，并利用新平台的特性，新增了一些拓展接口。长远来看，这可能导致不同兼容项目最终形成了各自的「OneBot 11 接口变种」，当用户深度接入其中一个兼容项目后，可能又会出现与其它变种不兼容的情况，最终仍然存在潜在的迁移困难。</p></blockquote><p>如你所见，OneBot 11 有很多不同的协议端实现，也产生了丰富的 API 文档。虽然它们都声称是 OneBot 11 的实现，但实际上它们之间有着很大的差异，而这些差异却鲜有专门的文章进行讨论。比如说，go-cqhttp 和 OneBot 11 本身的 API 文档就有很多不同之处，甚至在一些地方是<strong>互斥</strong>的！此外，原本的 OneBot 11 协议也有着诸多缺陷和过时之处，在这里也将一一列出。</p><p>尽管我们不能否认 OneBot 11 作为从无到有的协议的伟大之处，也很难撼动它在今日的地位，但必须承认，OneBot 11 远非完美。我们希望通过这个文档，对 OneBot 11 的现状进行一个全面的梳理和总结，帮助更多人了解 OneBot 11 并且编写兼容性更好的 OneBot 实现，同时也鞭策未来的协议设计者设计出更加友好的协议。</p><h2 id="那我还要不要读下去" tabindex="-1">那我还要不要读下去？ <a class="header-anchor" href="#那我还要不要读下去" aria-label="Permalink to &quot;那我还要不要读下去？&quot;">​</a></h2><p>如果你要部署机器人，那么你不需要关注 OneBot 11 的内在原理，请转而阅读你所使用的框架的文档，并且在出现兼容性问题时，向框架的作者反馈。</p><p>如果你是机器人开发者，那么一般而言，你只需要关注你所使用的应用端框架的 API。但当出现严重的兼容性问题时，你可以参考本文档来进行修复。</p><p>如果你是协议端或应用端框架的开发者/维护者，或者想要自己编写 OneBot 11 的 SDK，那么强烈建议你阅读本文档，这里提供了对目前 OneBot 11 协议实现差异的全面介绍，可以帮助你尽量减少兼容性问题的出现。</p><h2 id="私货" tabindex="-1">私货 <a class="header-anchor" href="#私货" aria-label="Permalink to &quot;私货&quot;">​</a></h2><p>有时你会看到这样的折叠板块：</p><details class="details custom-block"><summary>最佳实践</summary></details><p>还请注意，被折叠的内容并非 OneBot 11 标准或当前市面上协议端对 OneBot 11 的实现细节的一部分，仅是笔者提倡的协议实现时的“最佳实践”，供协议实现者参考。</p>',19)]))}const g=t(n,[["render",p]]);export{d as __pageData,g as default};
