import{_ as i,c as a,o as t,ae as h}from"./chunks/framework.CgMrDesg.js";const E=JSON.parse('{"title":"消息 ID","description":"","frontmatter":{},"headers":[],"relativePath":"message/id.md","filePath":"message/id.md"}'),e={name:"message/id.md"};function n(l,s,p,k,r,d){return t(),a("div",null,s[0]||(s[0]=[h(`<h1 id="消息-id" tabindex="-1">消息 ID <a class="header-anchor" href="#消息-id" aria-label="Permalink to &quot;消息 ID&quot;">​</a></h1><p>OneBot 11 规定消息 ID 是一个 32 位整数，<strong>这也是最为协议端开发者所诟病的一点</strong>。为了明白为什么这样的规定给开发者带来了如此大的麻烦，我们需要先了解一下 QQ 是如何标识消息的。</p><h2 id="qq-标识消息的方式" tabindex="-1">QQ 标识消息的方式 <a class="header-anchor" href="#qq-标识消息的方式" aria-label="Permalink to &quot;QQ 标识消息的方式&quot;">​</a></h2><p>一般来说，在 QQ 中定位一个消息需要三个参数：</p><ul><li>联系人类型（Peer Type）：群聊或私聊。</li><li>联系人 ID（Uin）：群聊的群号或好友的 QQ 号。</li><li>消息序列号（Seq）：一个递增的数字，表示这条消息是建群 / 加好友以来的第几条消息。</li></ul><p>此外，在私聊场景下，还有一些意义尚不明确但仍然会被使用的参数：</p><ul><li><code>clientSequence</code>：对于私聊双方来说不同，并且<strong>有可能重复</strong>，但都是递增的数字。在撤回和回复私聊消息时会用到。</li><li><code>messageUid</code>：一个 64 位整数，在所有消息中都是唯一的，但不能直接用于获取消息。需要在回复消息时传入，以便 QQ 客户端定位消息。</li></ul><h2 id="实现难点" tabindex="-1">实现难点 <a class="header-anchor" href="#实现难点" aria-label="Permalink to &quot;实现难点&quot;">​</a></h2><p>按照上面所说的三个参数：</p><ul><li>Peer Type 只有私聊和群聊两种，因此可以只用 1 个比特位来表示；</li><li>Uin 是 32 位无符号整数，因此可以用 32 位来表示；</li><li>Seq 一般不会超过 2147483647，因此可以用 31 位来表示。</li></ul><p>这样一来，消息 ID 就可以用 1 + 32 + 31 = 64 位整数来表示了。而问题是，OneBot 11 规定消息 ID 是一个 32 位整数，这就意味着高 32 位不得不被丢弃。这样一来，用这种表达方式根本无法保证消息 ID 的唯一性，也无法直接从这样的消息 ID 中还原出定位具体消息所需的参数。</p><p>不得不说，32 位整数消息 ID 是一个<strong>巨大的设计失误</strong>。很显然，OneBot 11 在做出这一规定时，完全没有考虑协议端应当如何编码消息 ID，当然也没有给出编码方式的规定。不同的协议端在实现时也都各自采用了不同的方式来确定消息 ID，这就造成消息 ID 在不同的协议端之间不能互通，在一个协议端上发送的消息在另一个协议端可能无法被识别。</p><h2 id="不同协议端的实现" tabindex="-1">不同协议端的实现 <a class="header-anchor" href="#不同协议端的实现" aria-label="Permalink to &quot;不同协议端的实现&quot;">​</a></h2><h3 id="go-cqhttp" tabindex="-1"><a href="https://github.com/Mrs4s/go-cqhttp/blob/a5923f179b360331786a6509eb33481e775a7bd1/db/database.go#L102" target="_blank" rel="noreferrer">go-cqhttp</a> <a class="header-anchor" href="#go-cqhttp" aria-label="Permalink to &quot;[go-cqhttp](https://github.com/Mrs4s/go-cqhttp/blob/a5923f179b360331786a6509eb33481e775a7bd1/db/database.go#L102)&quot;">​</a></h3><p>go-cqhttp 构造了 <code>\${code}-\${msgID}</code> 的字符串，然后对其进行 CRC32 校验，得到的值作为消息 ID。代码如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ToGlobalID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">code</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">msgID</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(crc32.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ChecksumIEEE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Sprintf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, code, msgID))))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="lagrange-onebot" tabindex="-1"><a href="https://github.com/LagrangeDev/Lagrange.Core/blob/0f3b9cae21321f7fd41d0346ce827d85c6c99361/Lagrange.OneBot/Database/MessageRecord.cs#L70" target="_blank" rel="noreferrer">Lagrange.OneBot</a> <a class="header-anchor" href="#lagrange-onebot" aria-label="Permalink to &quot;[Lagrange.OneBot](https://github.com/LagrangeDev/Lagrange.Core/blob/0f3b9cae21321f7fd41d0346ce827d85c6c99361/Lagrange.OneBot/Database/MessageRecord.cs#L70)&quot;">​</a></h3><p>Lagrange.OneBot 取 <code>messageUid</code> 和 <code>seq</code> 各自的低 16 位拼接在一起，作为消息 ID。代码如下：</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CalcMessageHash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ulong</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> msgId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> seq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ushort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)seq </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ushort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)msgId;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="napcatqq" tabindex="-1"><a href="https://github.com/NapNeko/NapCatQQ/blob/cc30b51d58233db02b48862ecca2c1aa24ce1535/src/common/message-unique.ts#L99" target="_blank" rel="noreferrer">NapCatQQ</a> <a class="header-anchor" href="#napcatqq" aria-label="Permalink to &quot;[NapCatQQ](https://github.com/NapNeko/NapCatQQ/blob/cc30b51d58233db02b48862ecca2c1aa24ce1535/src/common/message-unique.ts#L99)&quot;">​</a></h3><p>NapCatQQ 构造了 <code>\${msgId}|\${peerType}|\${peerUid}</code> 的字符串，然后对其进行 MD5 哈希，将其第一个字节修改为 0x7f 以保证消息 ID 为正数，最后取前 4 个字节作为消息 ID。核心代码如下：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createUniqueMsgId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(peer: Peer, msgId: string) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">msgId</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}|\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">peer</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">chatType</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}|\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">peer</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">peerUid</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hash</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> crypto.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createHash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;md5&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">digest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (hash[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        hash[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x7f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> shortId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hash.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readInt32BE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> shortId;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="llonebot" tabindex="-1"><a href="https://github.com/LLOneBot/LLOneBot/blob/f1af0d3a3db7031b82717ac44c892cf7656bcabe/src/main/store.ts#L64" target="_blank" rel="noreferrer">LLOneBot</a> <a class="header-anchor" href="#llonebot" aria-label="Permalink to &quot;[LLOneBot](https://github.com/LLOneBot/LLOneBot/blob/f1af0d3a3db7031b82717ac44c892cf7656bcabe/src/main/store.ts#L64)&quot;">​</a></h3><p>LLOneBot 使用了 NapCatQQ 的逻辑。</p>`,24)]))}const o=i(e,[["render",n]]);export{E as __pageData,o as default};
