import{_ as e,c as t,o,ae as i}from"./chunks/framework.CgMrDesg.js";const I=JSON.parse('{"title":"API 分类标准","description":"","frontmatter":{},"headers":[],"relativePath":"api/classify.md","filePath":"api/classify.md"}'),r={name:"api/classify.md"};function l(s,a,n,P,p,c){return o(),t("div",null,a[0]||(a[0]=[i('<h1 id="api-分类标准" tabindex="-1">API 分类标准 <a class="header-anchor" href="#api-分类标准" aria-label="Permalink to &quot;API 分类标准&quot;">​</a></h1><p>本文档中，我们根据 API 定义的时期，将 API 分为如下四种类型：</p><h2 id="🟢-原生-api" tabindex="-1">🟢 原生 API <a class="header-anchor" href="#🟢-原生-api" aria-label="Permalink to &quot;🟢 原生 API&quot;">​</a></h2><p>这一部分 API 是在 <a href="https://github.com/botuniverse/onebot-11/blob/master/api/public.md" target="_blank" rel="noreferrer">OneBot 11 标准</a>中定义的，属于 OneBot 的核心 API。它们是 OneBot 11 标准的基础，理论上讲，所有协议端实现都必须支持这些 API。</p><h2 id="🔵-gocq-api" tabindex="-1">🔵 GoCQ API <a class="header-anchor" href="#🔵-gocq-api" aria-label="Permalink to &quot;🔵 GoCQ API&quot;">​</a></h2><p>这一部分 API 不存在于 OneBot 11 标准中，而是在 go-cqhttp 中定义的。go-cqhttp 是基于旧版 QQ 协议的协议端实现，具有重要的历史地位，其提供的扩展 API 也被广泛使用。虽然这些 API 不属于 OneBot 11 标准的一部分，但它们在实际使用中非常常见，因此我们将它们归类为 GoCQ 扩展 API。</p><h2 id="🟡-扩展-api" tabindex="-1">🟡 扩展 API <a class="header-anchor" href="#🟡-扩展-api" aria-label="Permalink to &quot;🟡 扩展 API&quot;">​</a></h2><p>这一部分 API 所对应的特性有的在制定 OneBot 11 和 go-cqhttp 开发时并没有被考虑在内，有的则是专属于 NTQQ 的新特性，它们并没有统一的标准。本文档将总结目前尚在维护的协议端所提供的扩展 API。</p><h2 id="🔴-过时-api" tabindex="-1">🔴 过时 API <a class="header-anchor" href="#🔴-过时-api" aria-label="Permalink to &quot;🔴 过时 API&quot;">​</a></h2><p>这一部分 API 是在 OneBot 11 标准中定义的，但由于种种原因，它们所对应的 QQ 特性已不复存在，因此这些 API 已经过时，协议端也无从支持它们。</p><details class="details custom-block"><summary>最佳实践</summary><ul><li>对于 GoCQ API：建议所有协议端实现支持这些 API。</li><li>对于扩展 API：新的协议端实现者可以选择支持这些 API，并且建议在支持这些 API 时参考本文档的描述；而现有的协议端实现者，如果 API 的实现与本文档描述不一致，也建议修改实现，以便于用户使用。</li><li>对于过时 API：建议协议端实现者在文档中标明这些 API 已经过时，用户不应使用它们。</li></ul></details>',11)]))}const h=e(r,[["render",l]]);export{I as __pageData,h as default};
