import{_ as t,c as a,o,ae as d}from"./chunks/framework.CgMrDesg.js";const p=JSON.parse('{"title":"媒体消息段","description":"","frontmatter":{},"headers":[],"relativePath":"message/segment/media.md","filePath":"message/segment/media.md"}'),r={name:"message/segment/media.md"};function c(l,e,i,h,s,n){return o(),a("div",null,e[0]||(e[0]=[d('<h1 id="媒体消息段" tabindex="-1">媒体消息段 <a class="header-anchor" href="#媒体消息段" aria-label="Permalink to &quot;媒体消息段&quot;">​</a></h1><p>媒体消息段指单独作为一条消息，不能混合发送的消息段。</p><h2 id="文件类共同参数" tabindex="-1">文件类共同参数 <a class="header-anchor" href="#文件类共同参数" aria-label="Permalink to &quot;文件类共同参数&quot;">​</a></h2><p>这类消息在发送时会被上传到服务器，包含 <code>image</code>、<code>record</code> 和 <code>video</code> 三种类型。它们有一些共同的参数。</p><h3 id="发送参数" tabindex="-1">发送参数 <a class="header-anchor" href="#发送参数" aria-label="Permalink to &quot;发送参数&quot;">​</a></h3><table tabindex="0"><thead><tr><th>参数名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>file</td><td>string</td><td>文件路径</td></tr><tr><td>cache</td><td>boolean</td><td>是否使用缓存</td></tr><tr><td>proxy</td><td>boolean</td><td>是否使用代理</td></tr><tr><td>timeout</td><td>number</td><td>通过 URL 获取发送文件的超时时间，单位为秒</td></tr></tbody></table><p>按照 OneBot 11 标准，发送文件类消息时应当通过 <code>file</code> 参数指定要发送的文件，可以传入的值有：</p><ul><li><code>file://</code> 开头的本地文件路径，例如 <code>file://D:\\test.jpg</code>，<code>file:///Users/someone/test.jpg</code>，<code>file://./test.jpg</code> 等。</li><li><code>http://</code> 或 <code>https://</code> 开头的 URL，例如 <code>http://example.com/test.jpg</code>，<code>https://example.com/test.jpg</code> 等。</li><li><code>base64://</code> 开头的 Base64 编码字符串，例如 <code>base64://iVBORw0KGgoAAAANSUhEUgAAAAUA...</code> 等。</li></ul><p>在实际使用中，用户并不一定只通过 <code>file</code> 字段来传递文件路径，可能会使用其他字段来传递文件路径，部分协议端的适配如下：</p><ul><li><a href="https://github.com/NapNeko/NapCatQQ/blob/35f24eb8061c4934a3d9b6c5c335f5424516df9a/src/onebot/api/msg.ts#L1057" target="_blank" rel="noreferrer">NapCatQQ</a> 和 <a href="https://github.com/tanebijs/tanebi/blob/1aa0ebe39a9e99a6874f90fa6ecb6a9211378577/packages/app/src/common/download.ts#L44" target="_blank" rel="noreferrer">tanebi</a> 检测了 <code>file</code>、<code>url</code> 和 <code>path</code> 三个字段。</li><li><a href="https://github.com/LLOneBot/LLOneBot/blob/2f4e5052d90f6fec03c65e745266ce6ec312d108/src/onebot11/helper/createMessage.ts#L326" target="_blank" rel="noreferrer">LLOneBot</a> 检测了 <code>file</code> 和 <code>url</code> 两个字段。</li></ul><h3 id="接收参数" tabindex="-1">接收参数 <a class="header-anchor" href="#接收参数" aria-label="Permalink to &quot;接收参数&quot;">​</a></h3><table tabindex="0"><thead><tr><th>参数名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>file</td><td>string</td><td>文件路径</td></tr><tr><td>url</td><td>string</td><td>文件的 URL 地址</td></tr></tbody></table><p>OneBot 11 的本意是用 <code>url</code> 来直接表示文件资源的 URL，以便于应用端直接下载。但实际上，个别协议端（如 NapCatQQ）的早期实现并不能直接获取 <code>url</code>，而是拿到一个文件标识符，后续通过这个标识符再通过 <code>get_image</code> 之类的 API 获取文件本身内容。</p><details class="details custom-block"><summary>有关 NTQQ 内部的资源处理</summary><p>与旧版本 QQ 不同，新版本 QQ 已经无法在获取消息的时候同步获得资源 URL，而是转而使用了一个资源 ID 来标识这个资源。这个 ID 是一段 base64 编码的字符串，NTQQ 会再通过一次异步操作获取资源的 URL。OneBot 11 协议端实现普遍需要在收到每条媒体消息时都进行一次额外的异步操作，实际上这样造成了相当的性能损失。</p></details><h2 id="image" tabindex="-1"><code>image</code> <a class="header-anchor" href="#image" aria-label="Permalink to &quot;`image`&quot;">​</a></h2><p>表示一张图片。这个消息段比较特殊，既可以混合在富文本消息中发送，也可以单独发送。</p><h3 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h3><p>除上述共同参数外，<code>image</code> 消息段还有以下参数：</p><table tabindex="0"><thead><tr><th>参数名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>type</td><td>string</td><td>表示图片的类型，可选，唯一的非空值为 <code>flash</code>，表示闪照</td></tr></tbody></table><h3 id="说明" tabindex="-1">说明 <a class="header-anchor" href="#说明" aria-label="Permalink to &quot;说明&quot;">​</a></h3><p><a href="https://docs.go-cqhttp.org/cqcode/#%E5%9B%BE%E7%89%87" target="_blank" rel="noreferrer">go-cqhttp</a> 的实现中包含的扩展字段及解释如下：</p><table tabindex="0"><thead><tr><th>参数名</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>type</code></td><td>string</td><td>图片类型，<code>flash</code> 表示闪照，<code>show</code> 表示秀图，默认普通图片</td></tr><tr><td><code>subType</code></td><td>number</td><td>图片子类型，只出现在群聊</td></tr><tr><td><code>id</code></td><td>number</td><td>发送秀图时的特效 ID，默认为 40000</td></tr><tr><td><code>c</code></td><td>number</td><td>通过网络下载图片时的线程数，可选 <code>2</code> 或 <code>3</code>， 默认单线程</td></tr></tbody></table><p>注意这里的 <code>subType</code> 不符合 OneBot 11 一贯的 <code>snake_case</code> 风格，可能是因为早期的实现中没有考虑到这个问题。<code>id</code> 和 <code>c</code> 字段在其他协议端实现中并不常见。</p><p>go-cqhttp 对于 <code>subType</code> 的解释如下：</p><ul><li><code>0</code>：普通图片</li><li><code>1</code>：表情包，会被缩放显示</li></ul><p>只有以上两种较为常用，并且在 NTQQ 收到的图片也普遍属于这两种类型。</p><details class="details custom-block"><summary>其他奇奇怪怪的 <code>subType</code></summary><ul><li>2：热图</li><li>3：斗图</li><li>4：智图？</li><li>7：贴图</li><li>8：自拍</li><li>9：贴图广告？</li><li>10：有待测试</li><li>13：热搜图</li></ul><p>这些 <code>subType</code> 可能是一些过时的或未经测试的功能，不建议使用。</p></details><p>其他协议端也跟进实现了 <code>subType</code> 字段。</p><p>此外，Lagrange.OneBot、NapCatQQ、LLOneBot、tanebi 都不约而同地实现了 <code>summary</code> (string) 字段，该字段表示收到图片消息后显示的预览文本，对于 <code>subType</code> 为 0 默认显示为 <code>[图片]</code>，对于 <code>subType</code> 为 1 默认显示为 <code>[动画表情]</code>。</p><h2 id="record" tabindex="-1"><code>record</code> <a class="header-anchor" href="#record" aria-label="Permalink to &quot;`record`&quot;">​</a></h2><p>表示一条语音。</p><h3 id="参数-1" tabindex="-1">参数 <a class="header-anchor" href="#参数-1" aria-label="Permalink to &quot;参数&quot;">​</a></h3><p>除上述共同参数外，<code>record</code> 消息段还有以下参数：</p><table tabindex="0"><thead><tr><th>参数名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>magic</td><td>boolean</td><td>表示声音是否经过“变声”（QQ 的自带功能）处理。</td></tr></tbody></table><h3 id="说明-1" tabindex="-1">说明 <a class="header-anchor" href="#说明-1" aria-label="Permalink to &quot;说明&quot;">​</a></h3><p><code>magic</code> 字段普遍未实现（甚至包括 go-cqhttp），因为需求不足且变声包含多种类型，实现起来较为复杂。</p><p>NTQQ 只支持发送 Silk 格式的语音，而这一格式通常不易于直接使用，往往需要工具进行转换。各协议端使用的方案如下：</p><ul><li><a href="https://github.com/Mrs4s/go-cqhttp/blob/a5923f179b360331786a6509eb33481e775a7bd1/modules/silk/codec.go#L34" target="_blank" rel="noreferrer">go-cqhttp</a>、<a href="https://github.com/NapNeko/NapCatQQ/blob/88b86611a31318686be8e15b65ca19d99768d24d/src/common/audio.ts#L38" target="_blank" rel="noreferrer">NapCatQQ</a>、<a href="https://github.com/LLOneBot/LLOneBot/blob/2f4e5052d90f6fec03c65e745266ce6ec312d108/src/common/utils/audio.ts#L55" target="_blank" rel="noreferrer">LLOneBot</a>：依赖 ffmpeg。</li><li><a href="https://github.com/LagrangeDev/Lagrange.Core/blob/master/Lagrange.OneBot/Message/Entity/RecordSegment.cs" target="_blank" rel="noreferrer">Lagrange.OneBot</a>：依赖 <a href="https://github.com/KonataDev/Konata.Codec" target="_blank" rel="noreferrer">Konata.Codec</a>。</li><li><a href="https://github.com/tanebijs/tanebi/blob/main/packages/app/src/common/silk.ts" target="_blank" rel="noreferrer">tanebi</a>：依赖 <a href="https://github.com/ntsilk/ntsilk" target="_blank" rel="noreferrer">NTSilk</a>。</li></ul><h2 id="video" tabindex="-1"><code>video</code> <a class="header-anchor" href="#video" aria-label="Permalink to &quot;`video`&quot;">​</a></h2><p>表示一条视频。</p><h3 id="参数-2" tabindex="-1">参数 <a class="header-anchor" href="#参数-2" aria-label="Permalink to &quot;参数&quot;">​</a></h3><p>除上述共同参数外，没有其他参数。</p><h3 id="说明-2" tabindex="-1">说明 <a class="header-anchor" href="#说明-2" aria-label="Permalink to &quot;说明&quot;">​</a></h3><ul><li><a href="https://docs.go-cqhttp.org/cqcode/#%E7%9F%AD%E8%A7%86%E9%A2%91" target="_blank" rel="noreferrer">go-cqhttp</a> 的实现支持 <code>cover</code> (string) 字段，可以自定义视频封面。</li></ul>',44)]))}const m=t(r,[["render",c]]);export{p as __pageData,m as default};
