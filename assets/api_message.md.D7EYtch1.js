import{_ as e,c as a,o as d,ae as r}from"./chunks/framework.CgMrDesg.js";const c=JSON.parse('{"title":"消息 API","description":"","frontmatter":{},"headers":[],"relativePath":"api/message.md","filePath":"api/message.md"}'),o={name:"api/message.md"};function s(h,t,n,b,i,g){return d(),a("div",null,t[0]||(t[0]=[r('<h1 id="消息-api" tabindex="-1">消息 API <a class="header-anchor" href="#消息-api" aria-label="Permalink to &quot;消息 API&quot;">​</a></h1><h2 id="🟢-send-private-msg" tabindex="-1">🟢 <code>send_private_msg</code> <a class="header-anchor" href="#🟢-send-private-msg" aria-label="Permalink to &quot;🟢 `send_private_msg`&quot;">​</a></h2><p>发送私聊消息。</p><h3 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h3><table tabindex="0"><thead><tr><th>键名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>user_id</td><td>number</td><td>接收消息的用户 QQ 号</td></tr><tr><td>message</td><td>message</td><td>消息内容</td></tr><tr><td>auto_escape</td><td>boolean</td><td>默认 false，是否不解析 message，直接作为文本发送，仅在 message 是 string 时有效</td></tr></tbody></table><h3 id="响应数据" tabindex="-1">响应数据 <a class="header-anchor" href="#响应数据" aria-label="Permalink to &quot;响应数据&quot;">​</a></h3><table tabindex="0"><thead><tr><th>键名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>message_id</td><td>number</td><td>消息 ID</td></tr></tbody></table><h2 id="🟢-send-group-msg" tabindex="-1">🟢 <code>send_group_msg</code> <a class="header-anchor" href="#🟢-send-group-msg" aria-label="Permalink to &quot;🟢 `send_group_msg`&quot;">​</a></h2><p>发送群消息。</p><h3 id="参数-1" tabindex="-1">参数 <a class="header-anchor" href="#参数-1" aria-label="Permalink to &quot;参数&quot;">​</a></h3><table tabindex="0"><thead><tr><th>键名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>group_id</td><td>number</td><td>接收消息的群号</td></tr><tr><td>message</td><td>message</td><td>消息内容</td></tr><tr><td>auto_escape</td><td>boolean</td><td>默认 false，是否不解析 message，直接作为文本发送，仅在 message 是 string 时有效</td></tr></tbody></table><h3 id="响应数据-1" tabindex="-1">响应数据 <a class="header-anchor" href="#响应数据-1" aria-label="Permalink to &quot;响应数据&quot;">​</a></h3><table tabindex="0"><thead><tr><th>键名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>message_id</td><td>number</td><td>消息 ID</td></tr></tbody></table><h2 id="🟢-send-msg" tabindex="-1">🟢 <code>send_msg</code> <a class="header-anchor" href="#🟢-send-msg" aria-label="Permalink to &quot;🟢 `send_msg`&quot;">​</a></h2><p>发送消息。</p><h3 id="参数-2" tabindex="-1">参数 <a class="header-anchor" href="#参数-2" aria-label="Permalink to &quot;参数&quot;">​</a></h3><table tabindex="0"><thead><tr><th>键名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>message_type</td><td>string</td><td>消息类型，可能值：<code>private</code>、<code>group</code></td></tr><tr><td>user_id</td><td>number</td><td>接收消息的用户 QQ 号</td></tr><tr><td>group_id</td><td>number</td><td>接收消息的群号</td></tr><tr><td>message</td><td>message</td><td>消息内容</td></tr><tr><td>auto_escape</td><td>boolean</td><td>默认 false，是否不解析 message，直接作为文本发送，仅在 message 是 string 时有效</td></tr></tbody></table><h3 id="响应数据-2" tabindex="-1">响应数据 <a class="header-anchor" href="#响应数据-2" aria-label="Permalink to &quot;响应数据&quot;">​</a></h3><table tabindex="0"><thead><tr><th>键名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>message_id</td><td>number</td><td>消息 ID</td></tr></tbody></table><h3 id="说明" tabindex="-1">说明 <a class="header-anchor" href="#说明" aria-label="Permalink to &quot;说明&quot;">​</a></h3><p>OneBot 11 标准规定，当 message_type 未传入时，则根据 user_id 和 group_id 分别是否存在来判断消息类型，但没有规定二者冲突时的行为。各个协议端的实现细节如下：</p><ul><li><a href="https://github.com/Mrs4s/go-cqhttp/blob/a5923f179b360331786a6509eb33481e775a7bd1/coolq/api.go#L701" target="_blank" rel="noreferrer">go-cqhttp</a> 先判断 message_type 是否为 group，如果是则按群聊处理；否则判断 user_id 是否存在，若存在则按私聊处理；若冲突，可能会出现未定义的行为。</li><li><a href="https://github.com/LagrangeDev/Lagrange.Core/blob/2ab0c9213fd9ca7155ba5b88376160832bbaa977/Lagrange.OneBot/Core/Operation/Message/MessageCommon.cs#L65" target="_blank" rel="noreferrer">Lagrange.OneBot</a> 先判断 message_type 是否为 private，如果是则按私聊处理；否则判断 group_id 是否存在，若存在则按群聊处理；若冲突，可能会出现未定义的行为。</li><li><a href="https://github.com/NapNeko/NapCatQQ/blob/cc30b51d58233db02b48862ecca2c1aa24ce1535/src/onebot/action/msg/SendMsg.ts#L39" target="_blank" rel="noreferrer">NapCatQQ</a> 和 <a href="https://github.com/LLOneBot/LLOneBot/blob/f1af0d3a3db7031b82717ac44c892cf7656bcabe/src/onebot11/helper/createMessage.ts#L307" target="_blank" rel="noreferrer">LLOneBot</a> 会判断 message_type 和 user_id / group_id 的对应关系是否存在冲突，若存在冲突则返回错误；否则按 user_id 和 group_id 的存在性来判断消息类型。</li><li><a href="https://github.com/tanebijs/tanebi/blob/98c1b36ec200fdb27a7f5d05c7adebcfaf741185/packages/app/src/action/message/send_msg.ts#L10" target="_blank" rel="noreferrer">tanebi</a> 不校验冲突，直接按 user_id 和 group_id 的存在性来判断消息类型，若二者均不存在则报错。</li></ul><h2 id="🟢-delete-msg" tabindex="-1">🟢 <code>delete_msg</code> <a class="header-anchor" href="#🟢-delete-msg" aria-label="Permalink to &quot;🟢 `delete_msg`&quot;">​</a></h2><p>撤回消息。</p><h3 id="参数-3" tabindex="-1">参数 <a class="header-anchor" href="#参数-3" aria-label="Permalink to &quot;参数&quot;">​</a></h3><table tabindex="0"><thead><tr><th>键名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>message_id</td><td>number</td><td>消息 ID</td></tr></tbody></table><p>本 API 无响应数据。</p><h2 id="🟢-get-msg" tabindex="-1">🟢 <code>get_msg</code> <a class="header-anchor" href="#🟢-get-msg" aria-label="Permalink to &quot;🟢 `get_msg`&quot;">​</a></h2><p>获取消息。</p><h3 id="参数-4" tabindex="-1">参数 <a class="header-anchor" href="#参数-4" aria-label="Permalink to &quot;参数&quot;">​</a></h3><table tabindex="0"><thead><tr><th>键名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>message_id</td><td>number</td><td>消息 ID</td></tr></tbody></table><h3 id="响应数据-3" tabindex="-1">响应数据 <a class="header-anchor" href="#响应数据-3" aria-label="Permalink to &quot;响应数据&quot;">​</a></h3><table tabindex="0"><thead><tr><th>键名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>time</td><td>number</td><td>消息发送时间</td></tr><tr><td>message_type</td><td>string</td><td>消息类型，可能值：<code>private</code>、<code>group</code></td></tr><tr><td>message_id</td><td>number</td><td>消息 ID</td></tr><tr><td>real_id</td><td>number</td><td>消息的“真实”ID</td></tr><tr><td>sender</td><td>object</td><td>消息发送者信息，见消息事件</td></tr><tr><td>message</td><td>message</td><td>消息内容</td></tr></tbody></table><h3 id="说明-1" tabindex="-1">说明 <a class="header-anchor" href="#说明-1" aria-label="Permalink to &quot;说明&quot;">​</a></h3><p>OneBot 11 标准制定时 “真实” ID 的原本含义已经不得而知，各个协议端的实现细节如下：</p><ul><li><a href="https://github.com/Mrs4s/go-cqhttp/blob/a5923f179b360331786a6509eb33481e775a7bd1/coolq/api.go#L1689" target="_blank" rel="noreferrer">go-cqhttp</a> 和 <a href="https://github.com/LLOneBot/LLOneBot/blob/f1af0d3a3db7031b82717ac44c892cf7656bcabe/src/onebot11/action/msg/GetMsg.ts#L33" target="_blank" rel="noreferrer">LLOneBot</a> 将消息的 seq 作为 real_id 返回。</li><li><a href="https://github.com/LagrangeDev/Lagrange.Core/blob/2ab0c9213fd9ca7155ba5b88376160832bbaa977/Lagrange.OneBot/Core/Entity/Action/Response/OneBotGetMessageResponse.cs#L15" target="_blank" rel="noreferrer">Lagrange.OneBot</a>、<a href="https://github.com/NapNeko/NapCatQQ/blob/cc30b51d58233db02b48862ecca2c1aa24ce1535/src/onebot/action/msg/GetMsg.ts#L44" target="_blank" rel="noreferrer">NapCatQQ</a> 和 <a href="https://github.com/tanebijs/tanebi/blob/98c1b36ec200fdb27a7f5d05c7adebcfaf741185/packages/app/src/action/message/get_msg.ts#L25" target="_blank" rel="noreferrer">tanebi</a> 直接将 message_id 作为 real_id 返回。</li></ul><h2 id="🟢-get-forward-msg" tabindex="-1">🟢 <code>get_forward_msg</code> <a class="header-anchor" href="#🟢-get-forward-msg" aria-label="Permalink to &quot;🟢 `get_forward_msg`&quot;">​</a></h2><p>获取合并转发消息的内容。</p><h3 id="参数-5" tabindex="-1">参数 <a class="header-anchor" href="#参数-5" aria-label="Permalink to &quot;参数&quot;">​</a></h3><table tabindex="0"><thead><tr><th>键名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>string</td><td>合并转发资源 ID</td></tr></tbody></table><h3 id="响应数据-4" tabindex="-1">响应数据 <a class="header-anchor" href="#响应数据-4" aria-label="Permalink to &quot;响应数据&quot;">​</a></h3><table tabindex="0"><thead><tr><th>键名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>message</td><td>message</td><td>消息内容，使用数组格式表示，数组中的消息段全部为 node 消息段</td></tr></tbody></table><h3 id="说明-2" tabindex="-1">说明 <a class="header-anchor" href="#说明-2" aria-label="Permalink to &quot;说明&quot;">​</a></h3><p>在这一 API 上，<a href="https://github.com/botuniverse/onebot-11/blob/master/api/public.md#get_forward_msg-%E8%8E%B7%E5%8F%96%E5%90%88%E5%B9%B6%E8%BD%AC%E5%8F%91%E6%B6%88%E6%81%AF" target="_blank" rel="noreferrer">OneBot 11 的定义</a>和 <a href="https://docs.go-cqhttp.org/api/#%E8%8E%B7%E5%8F%96%E5%90%88%E5%B9%B6%E8%BD%AC%E5%8F%91%E5%86%85%E5%AE%B9" target="_blank" rel="noreferrer">go-cqhttp 的实现</a>完全不同。前者接受的参数及响应数据如上所述；后者接受 <code>message_id</code>（这个参数名具有误导性，实际上对应的是合并转发资源 ID 而非消息 ID，在文档中也已说明）作为参数，返回值的键名为 <code>messages</code>。其余协议端的实现细节如下：</p><ul><li>Lagrange.OneBot (<a href="https://github.com/LagrangeDev/Lagrange.Core/blob/master/Lagrange.OneBot/Core/Entity/Action/OneBotGetForwardMsg.cs" target="_blank" rel="noreferrer">Payload</a>, <a href="https://github.com/LagrangeDev/Lagrange.Core/blob/master/Lagrange.OneBot/Core/Entity/Action/OneBotGetForwardMsg.cs" target="_blank" rel="noreferrer">Response</a>) 的实现与 OneBot 11 的定义一致，接受 <code>id</code> 作为参数，返回值的键名为 <code>message</code>。</li><li><a href="https://github.com/NapNeko/NapCatQQ/blob/main/src/onebot/action/go-cqhttp/GetForwardMsg.ts" target="_blank" rel="noreferrer">NapCatQQ</a>、<a href="https://github.com/LLOneBot/LLOneBot/blob/main/src/onebot11/action/go-cqhttp/GetForwardMsg.ts" target="_blank" rel="noreferrer">LLOneBot</a> 同时接受两个版本的参数，但返回值的键名恒为 <code>messages</code>。</li><li><a href="https://github.com/tanebijs/tanebi/blob/main/packages/app/src/action/message/get_forward_msg.ts" target="_blank" rel="noreferrer">tanebi</a> 同时接受两个版本的参数，并且根据参数名来判断使用哪个版本的返回键名。</li></ul><h2 id="🔵-send-group-forward-msg" tabindex="-1">🔵 <code>send_group_forward_msg</code> <a class="header-anchor" href="#🔵-send-group-forward-msg" aria-label="Permalink to &quot;🔵 `send_group_forward_msg`&quot;">​</a></h2><p>发送群聊合并转发消息。</p><h3 id="参数-6" tabindex="-1">参数 <a class="header-anchor" href="#参数-6" aria-label="Permalink to &quot;参数&quot;">​</a></h3><table tabindex="0"><thead><tr><th>键名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>group_id</td><td>number</td><td>接收消息的群号</td></tr><tr><td>messages</td><td>message</td><td>消息内容，每个消息段必须 type 为 node</td></tr></tbody></table><h3 id="响应数据-5" tabindex="-1">响应数据 <a class="header-anchor" href="#响应数据-5" aria-label="Permalink to &quot;响应数据&quot;">​</a></h3><table tabindex="0"><thead><tr><th>键名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>message_id</td><td>number</td><td>消息 ID</td></tr><tr><td>forward_id</td><td>string</td><td>合并转发资源 ID</td></tr></tbody></table><h2 id="🔵-send-private-forward-msg" tabindex="-1">🔵 <code>send_private_forward_msg</code> <a class="header-anchor" href="#🔵-send-private-forward-msg" aria-label="Permalink to &quot;🔵 `send_private_forward_msg`&quot;">​</a></h2><p>发送私聊合并转发消息。</p><h3 id="参数-7" tabindex="-1">参数 <a class="header-anchor" href="#参数-7" aria-label="Permalink to &quot;参数&quot;">​</a></h3><table tabindex="0"><thead><tr><th>键名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>user_id</td><td>number</td><td>接收消息的用户 QQ 号</td></tr><tr><td>messages</td><td>message</td><td>消息内容，每个消息段必须 type 为 node</td></tr></tbody></table><h3 id="响应数据-6" tabindex="-1">响应数据 <a class="header-anchor" href="#响应数据-6" aria-label="Permalink to &quot;响应数据&quot;">​</a></h3><table tabindex="0"><thead><tr><th>键名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>message_id</td><td>number</td><td>消息 ID</td></tr><tr><td>forward_id</td><td>string</td><td>合并转发资源 ID</td></tr></tbody></table><h2 id="🟡-send-forward-msg" tabindex="-1">🟡 <code>send_forward_msg</code> <a class="header-anchor" href="#🟡-send-forward-msg" aria-label="Permalink to &quot;🟡 `send_forward_msg`&quot;">​</a></h2><p>这是一个扩展 API，在不同协议端的实现不同：</p><ul><li><p><a href="https://github.com/Mrs4s/go-cqhttp/blob/a5923f179b360331786a6509eb33481e775a7bd1/coolq/api.go#L719" target="_blank" rel="noreferrer">go-cqhttp</a> 将其实现为<strong>发送合并转发消息</strong>，但未在 API 文档中列出，参数如下：</p><table tabindex="0"><thead><tr><th>键名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>message_type</td><td>string</td><td>消息类型，可能值：<code>private</code>、<code>group</code></td></tr><tr><td>user_id</td><td>number</td><td>接收消息的用户 QQ 号</td></tr><tr><td>group_id</td><td>number</td><td>接收消息的群号</td></tr><tr><td>messages</td><td>message</td><td>消息内容，每个消息段必须 type 为 node</td></tr></tbody></table><p>返回值与 <a href="#🔵-send-group-forward-msg"><code>send_group_forward_msg</code></a>、<a href="#🔵-send-private-forward-msg"><code>send_private_forward_msg</code></a> 相同。</p></li><li><p><a href="https://github.com/tanebijs/tanebi/blob/main/packages/app/src/action/message/send_forward_msg.ts" target="_blank" rel="noreferrer">tanebi</a> 的实现与 go-cqhttp 相同。</p></li><li><p><a href="https://lagrange-onebot.apifox.cn/236981861e0" target="_blank" rel="noreferrer">Lagrange.OneBot</a> 将其实现为<strong>构造合并转发消息</strong>，参数如下：</p><table tabindex="0"><thead><tr><th>键名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>messages</td><td>message</td><td>消息内容，每个消息段必须 type 为 node</td></tr></tbody></table><p>返回值是一个字符串（而非 JSON object），为合并转发资源 ID，可直接用于发送，但只能用于向群聊发送合并转发消息。</p></li><li><p><a href="https://napcat.apifox.cn/226659136e0" target="_blank" rel="noreferrer">NapCatQQ</a> 将其实现为<strong>发送合并转发消息</strong>，相较于 go-cqhttp 的实现多出了一些可配置的参数，具体如下：</p><table tabindex="0"><thead><tr><th>键名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>user_id</td><td>number</td><td>接收消息的用户 QQ 号，和 group_id 二选一</td></tr><tr><td>group_id</td><td>number</td><td>接收消息的群号，和 user_id 二选一</td></tr><tr><td>messages</td><td>message</td><td>消息内容，每个消息段必须 type 为 node</td></tr><tr><td>prompt</td><td>string</td><td>收到消息，显示在文字预览的提示文本，例如 &quot;[聊天记录]&quot;</td></tr><tr><td>source</td><td>string</td><td>合并转发的标题，例如 &quot;群聊的聊天记录&quot;</td></tr><tr><td>news</td><td>array</td><td>合并转发的内容预览，格式为 <code>{ text: string }</code> 的数组，例如 &quot;某人: [动画表情]&quot;</td></tr><tr><td>summary</td><td>string</td><td>合并转发的脚注，例如 &quot;查看 10 条转发消息&quot;</td></tr></tbody></table><p>返回值同 <a href="#🟢-send-msg"><code>send_msg</code></a>。</p></li><li><p><a href="https://github.com/LLOneBot/LLOneBot/blob/main/src/onebot11/action/go-cqhttp/SendForwardMsg.ts" target="_blank" rel="noreferrer">LLOneBot</a> 将其实现为<strong>发送合并转发消息</strong>，参数如下：</p><table tabindex="0"><thead><tr><th>键名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>message_type</td><td>string</td><td>消息类型，可能值：<code>private</code>、<code>group</code></td></tr><tr><td>user_id</td><td>number</td><td>接收消息的用户 QQ 号</td></tr><tr><td>group_id</td><td>number</td><td>接收消息的群号</td></tr><tr><td>message</td><td>message</td><td>消息内容，每个消息段必须 type 为 node</td></tr><tr><td>messages</td><td>message</td><td>定义和 message 相同，二选一</td></tr></tbody></table><p>参数与 go-cqhttp 的实现接近，但保留了 <code>messages</code> 字段以保证更好的兼容性</p><p>返回值与 <a href="#🔵-send-group-forward-msg"><code>send_group_forward_msg</code></a>、<a href="#🔵-send-private-forward-msg"><code>send_private_forward_msg</code></a> 相同。</p></li></ul>',60)]))}const m=e(o,[["render",s]]);export{c as __pageData,m as default};
